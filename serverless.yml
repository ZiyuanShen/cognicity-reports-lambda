service: riskmapbot

custom:
  projectName: riskmapbot
  dotenv:
    FACEBOOK_VALIDATION_TOKEN: ${file(./env.yml):facebookvalidationtoken}
    FACEBOOK_PAGE_ACCESS_TOKEN: ${file(./env.yml):facebookpageaccesstoken}
    TELEGRAM_BOTTOKEN: ${file(./env.yml):telegrambottoken}
    TWITTER_CONSUMER_KEY: ${file(./env.yml):twitterconsumerkey}
    TWITTER_CONSUMER_SECRET: ${file(./env.yml):twitterconsumersecret}
    TWITTER_ACCESS_TOKEN_KEY: ${file(./env.yml):twitteraccesstokenkey}
    TWITTER_ACCESS_TOKEN_SECRET: ${file(./env.yml):twitteraccesstokensecret}
    DEFAULT_LANG: ${file(./env.yml):defaultlang}
    FRONTEND_CARD_PATH: ${file(./env.yml):frontendcardpath}
    FRONTEND_MAP_PATH: ${file(./env.yml):frontendmappath}
    SERVER_API_KEY: ${file(./env.yml):serverapikey}
    SERVER_PATH: ${file(./env.yml):serverpath}

plugins:
   - serverless-plugin-dotenv

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1

# You can overwrite defaults by adding the following
#  stage: dev
#  region: us-east-1

# Add one function for each Lambda
functions:
  facebookWebhook: # Lambda that gets triggered when user starts a conversation with Facebook Messenger bot
    handler: handler.facebookWebhook
    events:
      - http:
          path: facebook/webhook
          method: GET # This webhook lambda is called by Facebook to verify the tokens
          integration: lambda
      - http:
          path: facebook/webhook
          method: POST # On POST, this lambda talks to the cognicity server to fetch unique cardId, constructs a response and sends the card OTL to the user
          integration: lambda
  facebookReply: # Lambda that gets triggered when a message is published to the SNS topic Facebook
    handler: handler.facebookReply
    events:
      - sns: Facebook
  telegramWebhook: # Lambda that gets triggered when user starts a conversation with Telegram bot
    handler: handler.telegramWebhook
    events:
      - http:
          path: telegram/webhook
          method: POST # On POST, this lambda talks to the cognicity server to fetch unique cardId, constructs a response and sends the card OTL to the user
          integration: lambda
  telegramReply: # Lambda that gets triggered when a message is published to the SNS topic Telegram
    handler: handler.telegramReply
    events:
      - sns: Telegram
  twitterReply: # Lambda that gets triggered when a message is published to the SNS topic Twitter
    handler: handler.twitterReply
    events:
      - sns: Twitter
